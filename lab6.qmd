---
project:
  title: "Lab 6"
  output-dir: docs
  type: website
format: 
  html:
    self-contained: true
---

## 

```{r}







library(tidyverse)
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)
```

```{r}
root  <- 'https://gdex.ucar.edu/dataset/camels/file'

download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', 
              'data/camels_attributes_v2.0.pdf')

types <- c("clim", "geol", "soil", "topo", "vege", "hydro")

# Where the files live online ...
remote_files  <- glue('{root}/camels_{types}.txt')
# where we want to download the data ...
local_files   <- glue('data/camels_{types}.txt')

walk2(remote_files, local_files, download.file, quiet = TRUE)

# Read and merge data
camels <- map(local_files, read_delim, show_col_types = FALSE) 

camels <- power_full_join(camels ,by = 'gauge_id')


```

```{r}

#### QUESTION 1

library(ggplot2)


ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = q_mean)) +
  scale_color_gradient(low = "pink", high = "dodgerblue") +
  ggthemes::theme_map()



##### Zero_q_freq indicates the frequency of days where Q = 0 mm/day.
```

```{r}

##### QUESTION 2


aridity_map <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
   borders("state", colour = "gray50") +
  geom_point(aes(color = aridity)) +
  scale_color_gradient(low = "red", high = "purple") +
  labs(color = "Priestly-Taylor Aridity Index",
       x = "Longitude",
       y = "Latitude")+
  ggthemes::theme_map()


rainfall_map <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
   borders("state", colour = "gray50") +
  geom_point(aes(color = p_mean)) +
  scale_color_gradient(low = "green", high = "blue") +
  labs(color = "Rainfall",
       x = "Longitude",
       y = "Latitude") +
  ggthemes::theme_map()

library(patchwork)

combined_map <- aridity_map + rainfall_map  
print(combined_map)


camels |> 
  select(aridity, p_mean, q_mean) |> 
  drop_na() |> 
  cor()


# Create a scatter plot of aridity vs rainfall
ggplot(camels, aes(x = aridity, y = p_mean)) +
  # Add points colored by mean flow
  geom_point(aes(color = q_mean)) +
  # Add a linear regression line
  geom_smooth(method = "lm", color = "red", linetype = 2) +
  # Apply the viridis color scale
  scale_color_viridis_c() +
  # Add a title, axis labels, and theme (w/ legend on the bottom)
  theme_linedraw() + 
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")


ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  # Apply a log transformation to the color scale
  scale_color_viridis_c(trans = "log") +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom",
        # Expand the legend width ...
        legend.key.width = unit(2.5, "cm"),
        legend.key.height = unit(.5, "cm")) + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow") 

ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c() +
  # Apply log transformations to the x and y axes
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")



set.seed(123)
# Bad form to perform simple transformations on the outcome variable within a 
# recipe. So, we'll do it here.
camels <- camels |> 
  mutate(logQmean = log(q_mean))

# Generate the split
camels_split <- initial_split(camels, prop = 0.8)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)




# Create a recipe to preprocess the data
rec <-  recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
  # Log transform the predictor variables (aridity and p_mean)
  step_log(all_predictors()) %>%
  # Add an interaction term between aridity and p_mean
  step_interact(terms = ~ aridity:p_mean) |> 
  # Drop any rows with missing values in the pred
  step_naomit(all_predictors(), all_outcomes())


# Prepare the data
baked_data <- prep(rec, camels_train) |> 
  bake(new_data = NULL)

# Interaction with lm
#  Base lm sets interaction terms with the * symbol
lm_base <- lm(logQmean ~ aridity * p_mean, data = baked_data)
summary(lm_base)

# Sanity Interaction term from recipe ... these should be equal!!
summary(lm(logQmean ~ aridity + p_mean + aridity_x_p_mean, data = baked_data))


test_data <-  bake(prep(rec), new_data = camels_test)
test_data$lm_pred <- predict(lm_base, newdata = test_data)


metrics(test_data, truth = logQmean, estimate = lm_pred)


ggplot(test_data, aes(x = logQmean, y = lm_pred, colour = aridity)) +
  # Apply a gradient color scale
  scale_color_gradient2(low = "brown", mid = "orange", high = "darkgreen") +
  geom_point() +
  geom_abline(linetype = 2) +
  theme_linedraw() + 
  labs(title = "Linear Model: Observed vs Predicted",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")

# Define model
lm_model <- linear_reg() %>%
  # define the engine
  set_engine("lm") %>%
  # define the mode
  set_mode("regression")

# Instantiate a workflow ...
lm_wf <- workflow() %>%
  # Add the recipe
  add_recipe(rec) %>%
  # Add the model
  add_model(lm_model) %>%
  # Fit the model to the training data
  fit(data = camels_train) 

# Extract the model coefficients from the workflow
summary(extract_fit_engine(lm_wf))$coefficients

# From the base implementation
summary(lm_base)$coefficients


#
lm_data <- augment(lm_wf, new_data = camels_test)
dim(lm_data)

metrics(lm_data, truth = logQmean, estimate = .pred)

ggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()


library(baguette)
rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

rf_wf <- workflow() %>%
  # Add the recipe
  add_recipe(rec) %>%
  # Add the model
  add_model(rf_model) %>%
  # Fit the model
  fit(data = camels_train) 

rf_data <- augment(rf_wf, new_data = camels_test)
dim(rf_data)

metrics(rf_data, truth = logQmean, estimate = .pred)

ggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()


wf <- workflow_set(list(rec), list(lm_model, rf_model)) %>%
  workflow_map('fit_resamples', resamples = camels_cv) 

autoplot(wf)


rank_results(wf, rank_metric = "rsq", select_best = TRUE)

aridity_map
rainfall_map
```

```{r}


#### QUESTION 3


library(xgboost)

xgboost_model <- boost_tree() %>%
  set_engine("xgboost") %>%
set_mode("regression")

nn_model <- bag_mlp() %>%
  set_engine("nnet") %>%
  set_mode("regression")
  
  wf <- workflow_set(list(rec), list(lm_model, rf_model, xgboost_model,
                                     nn_model)) %>%
  workflow_map('fit_resamples', resamples = camels_cv)
  
  autoplot(wf)
  
  rank_results(wf, rank_metric = "rsq", select_best = TRUE)
  
  #### I think the neural network model is the best because it has the highest R-squared and 
  ### the lowest RMSE value
  
```

```{r}


#### QUESTION 4

##data splitting
set.seed(555)
camels_select <- camels |>
  mutate(logQmean = log(q_mean + 1)) |>
  select(logQmean, aridity, p_mean, pet_mean, p_seasonality) %>% 
  drop_na()

camels_split <- initial_split(camels_select, prop = 0.75)
camels_training <- training(camels_split)
camels_testing <- testing(camels_split)

camels_folds4 <- vfold_cv(camels_training, v = 10)
##recipe
second_rec <- recipe(logQmean ~ ., data = camels_training) |>
  #step_log(all_predictors()) |>
  step_normalize(all_predictors()) |>
  step_interact(terms = ~ aridity:p_mean)

## I chose this formula because the selected data shows the relationship best

rand_model <- rand_forest() |>
  set_engine("ranger") |>
  set_mode("regression")

linear_model <- linear_reg() |>
  set_engine("lm") |>
  set_mode("regression")

decision_model <- decision_tree() |>
  set_engine("rpart") |>
  set_mode("regression")
##workflow set
wf4 <- workflow_set(list(second_rec), list(rand_model, linear_model, decision_model)) |>
  workflow_map('fit_resamples', resamples = camels_folds4)

## evaluate

autoplot(wf4)


rank_results(wf, rank_metric = "rsq", select_best = TRUE)

##I think the random forest model is the best because of the high rsq value

rf_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(rand_model) %>%
  fit(data = camels_train) 

data <- augment(rf_wf, new_data = camels_test)

ggplot(data, aes(x = logQmean, y = .pred, colour = aridity)) +
  geom_point() + 
  scale_color_continuous() +
  labs(
    title = "Observed vs. Predicted Values", color = "blue"
  )

## I think the plot shows that it is a decent model due to the positive slope and values that are close to the 1:1 line 

```
